
name: Deploy Hello-World Function to OCI

on:
  push:
    branches:
      - main

env:
  APP_NAME: "hello-world-app"
  FUNCTION_NAME: "hello-world-writer"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 1. Check out repository
      uses: actions/checkout@v4

    - name: 2. Install OCI CLI using pip
      run: pip install oci-cli

    - name: 3. Configure OCI CLI
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
        echo "[DEFAULT]" > ~/.oci/config
        echo "user=${{ secrets.OCI_USER_OCID }}" >> ~/.oci/config
        echo "fingerprint=${{ secrets.OCI_FINGERPRINT }}" >> ~/.oci/config
        echo "tenancy=${{ secrets.OCI_TENANCY_OCID }}" >> ~/.oci/config
        echo "region=${{ secrets.OCI_REGION }}" >> ~/.oci/config
        echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
        chmod 600 ~/.oci/oci_api_key.pem ~/.oci/config

    - name: 4. Log in to OCI Container Registry (OCIR)
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.OCI_REGION }}.ocir.io
        username: ${{ secrets.OCIR_USERNAME }}
        password: ${{ secrets.OCIR_AUTH_TOKEN }}

    - name: 5. Set Image Tag Environment Variable
      run: |
        IMAGE_TAG="${{ secrets.OCI_REGION }}.ocir.io/${{ secrets.OCI_NAMESPACE }}/${{ env.APP_NAME }}/${{ env.FUNCTION_NAME }}:${{ github.sha }}"
        echo "FULL_IMAGE_NAME=$IMAGE_TAG" >> $GITHUB_ENV

    - name: 6. Build and Push Docker Image
      run: |
        docker build -t "${{ env.FULL_IMAGE_NAME }}" .
        docker push "${{ env.FULL_IMAGE_NAME }}"

    - name: 7. Create or Update OCI Function
      run: |
        # First, get the Application OCID.
        echo "Looking up application OCID for '${{ env.APP_NAME }}'..."
        APP_OCID=$(oci fn application list --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --display-name "${{ env.APP_NAME }}" --query "data[0].id" --raw-output)
        
        if [ -z "$APP_OCID" ]; then
          echo "FATAL: Application '${{ env.APP_NAME }}' not found."
          exit 1
        fi
        echo "Application OCID: $APP_OCID"

        # Now, check if the function exists within that application.
        echo "Checking for existing function '${{ env.FUNCTION_NAME }}'..."
        FUNCTION_OCID=$(oci fn function list --application-id "$APP_OCID" --display-name "${{ env.FUNCTION_NAME }}" --query "data[0].id" --raw-output || true)

        if [ -z "$FUNCTION_OCID" ]; then
          echo "Function not found. Creating it for the first time with the correct annotation..."
          # The 'create' command MUST have the --annotation flag.
          oci fn function create \
            --application-id "$APP_OCID" \
            --display-name "${{ env.FUNCTION_NAME }}" \
            --image "${{ env.FULL_IMAGE_NAME }}" \
            --memory-in-mbs 512 \
            --timeout-in-seconds 30 \
            --annotation 'oracle.com/oci/auth/principal="dynamic_group"'
        else
          echo "Function found with OCID: $FUNCTION_OCID. Updating its image..."
          # The 'update' command MUST NOT have the --annotation flag.
          oci fn function update \
            --function-id "$FUNCTION_OCID" \
            --image "${{ env.FULL_IMAGE_NAME }}" \
            --memory-in-mbs 512
        fi
        
        echo "âœ… Deployment successful!"